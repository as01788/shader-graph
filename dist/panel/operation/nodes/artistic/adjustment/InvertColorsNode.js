"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../../../base");
const utils_1 = require("../../../utils");
class InvertColorsNode extends base_1.ShaderNode {
    generateCode() {
        let ins = this.inputSlots[0];
        let precision = ins.concretePrecision;
        let inputVarName = ins.varName;
        let code = '';
        if (!ins.connectSlot) {
            code += `${utils_1.getPrecisionName(precision)} ${inputVarName} = ${ins.slotValue};`;
        }
        else {
            inputVarName = ins.connectSlot.varName;
        }
        let value;
        if (precision > 1) {
            let values = [];
            values.push(this.data.m_RedChannel ? `1. - ${inputVarName}.r` : `${inputVarName}.r`);
            values.push(this.data.m_GreenChannel ? `1. - ${inputVarName}.g` : `${inputVarName}.g`);
            values.push(this.data.m_BlueChannel ? `1. - ${inputVarName}.b` : `${inputVarName}.b`);
            values.push(this.data.m_AlphaChannel ? `1. - ${inputVarName}.a` : `${inputVarName}.a`);
            values.length = precision;
            value = values.join(', ');
        }
        else {
            value = this.data.m_RedChannel ? `1. - ${inputVarName}` : `${inputVarName}`;
        }
        code += `${utils_1.getPrecisionName(precision)} ${this.getOutputVarName(0)} = ${utils_1.getPrecisionName(precision)}(${value});`;
        return code;
    }
}
exports.default = InvertColorsNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW52ZXJ0Q29sb3JzTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NvdXJjZS9wYW5lbC9vcGVyYXRpb24vbm9kZXMvYXJ0aXN0aWMvYWRqdXN0bWVudC9JbnZlcnRDb2xvcnNOb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQTJDO0FBQzNDLDBDQUFrRDtBQUVsRCxNQUFxQixnQkFBaUIsU0FBUSxpQkFBVTtJQUNwRCxZQUFZO1FBQ1IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLFNBQVMsR0FBRyxHQUFHLENBQUMsaUJBQWlCLENBQUM7UUFFdEMsSUFBSSxZQUFZLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUMvQixJQUFJLElBQUksR0FBVyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxJQUFJLEdBQUcsd0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksWUFBWSxNQUFNLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQztTQUNoRjthQUNJO1lBQ0QsWUFBWSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxLQUFhLENBQUM7UUFDbEIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxNQUFNLEdBQWEsRUFBRSxDQUFBO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxJQUFJLENBQUMsQ0FBQztZQUNyRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxRQUFRLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksSUFBSSxDQUFDLENBQUM7WUFDdkYsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLElBQUksQ0FBQyxDQUFDO1lBQ3RGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLFFBQVEsWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxJQUFJLENBQUMsQ0FBQztZQUV2RixNQUFNLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUUxQixLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjthQUNJO1lBQ0QsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksRUFBRSxDQUFDO1NBQy9FO1FBRUQsSUFBSSxJQUFJLEdBQUcsd0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxNQUFNLHdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO1FBQ2pILE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSjtBQWpDRCxtQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaGFkZXJOb2RlIH0gZnJvbSBcIi4uLy4uLy4uL2Jhc2VcIjtcbmltcG9ydCB7IGdldFByZWNpc2lvbk5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52ZXJ0Q29sb3JzTm9kZSBleHRlbmRzIFNoYWRlck5vZGUge1xuICAgIGdlbmVyYXRlQ29kZSAoKSB7XG4gICAgICAgIGxldCBpbnMgPSB0aGlzLmlucHV0U2xvdHNbMF07XG4gICAgICAgIGxldCBwcmVjaXNpb24gPSBpbnMuY29uY3JldGVQcmVjaXNpb247XG5cbiAgICAgICAgbGV0IGlucHV0VmFyTmFtZSA9IGlucy52YXJOYW1lO1xuICAgICAgICBsZXQgY29kZTogc3RyaW5nID0gJyc7XG4gICAgICAgIGlmICghaW5zLmNvbm5lY3RTbG90KSB7XG4gICAgICAgICAgICBjb2RlICs9IGAke2dldFByZWNpc2lvbk5hbWUocHJlY2lzaW9uKX0gJHtpbnB1dFZhck5hbWV9ID0gJHtpbnMuc2xvdFZhbHVlfTtgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRWYXJOYW1lID0gaW5zLmNvbm5lY3RTbG90LnZhck5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmFsdWU6IHN0cmluZztcbiAgICAgICAgaWYgKHByZWNpc2lvbiA+IDEpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZXM6IHN0cmluZ1tdID0gW11cbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMuZGF0YS5tX1JlZENoYW5uZWwgPyBgMS4gLSAke2lucHV0VmFyTmFtZX0ucmAgOiBgJHtpbnB1dFZhck5hbWV9LnJgKTtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMuZGF0YS5tX0dyZWVuQ2hhbm5lbCA/IGAxLiAtICR7aW5wdXRWYXJOYW1lfS5nYCA6IGAke2lucHV0VmFyTmFtZX0uZ2ApO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godGhpcy5kYXRhLm1fQmx1ZUNoYW5uZWwgPyBgMS4gLSAke2lucHV0VmFyTmFtZX0uYmAgOiBgJHtpbnB1dFZhck5hbWV9LmJgKTtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMuZGF0YS5tX0FscGhhQ2hhbm5lbCA/IGAxLiAtICR7aW5wdXRWYXJOYW1lfS5hYCA6IGAke2lucHV0VmFyTmFtZX0uYWApO1xuXG4gICAgICAgICAgICB2YWx1ZXMubGVuZ3RoID0gcHJlY2lzaW9uO1xuXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5qb2luKCcsICcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmRhdGEubV9SZWRDaGFubmVsID8gYDEuIC0gJHtpbnB1dFZhck5hbWV9YCA6IGAke2lucHV0VmFyTmFtZX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgY29kZSArPSBgJHtnZXRQcmVjaXNpb25OYW1lKHByZWNpc2lvbil9ICR7dGhpcy5nZXRPdXRwdXRWYXJOYW1lKDApfSA9ICR7Z2V0UHJlY2lzaW9uTmFtZShwcmVjaXNpb24pfSgke3ZhbHVlfSk7YDtcbiAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxufVxuIl19