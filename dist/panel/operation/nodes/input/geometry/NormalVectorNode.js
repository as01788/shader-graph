"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../../../base");
const type_1 = require("../../../type");
class NormalVectorNode extends base_1.ShaderNode {
    constructor(data) {
        super(data);
        this.concretePrecisionType = type_1.ConcretePrecisionType.Fixed;
        if (this.data.m_Space === type_1.NormalSpace.Object - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.Object);
        }
        else if (this.data.m_Space === type_1.NormalSpace.View - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.View);
        }
        else if (this.data.m_Space === type_1.NormalSpace.Tangent - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.Tangent);
            console.error('Not support Tangent Normal');
        }
        else if (this.data.m_Space === type_1.NormalSpace.World - type_1.NormalSpace.Object) {
            this.depVarings.push(type_1.NormalSpace.World);
        }
    }
    calcConcretePrecision() {
        this.slots.forEach(slot => {
            slot._concretePrecision = 3;
        });
    }
    generateCode() {
        let name = 'normal';
        if (this.data.m_Space === type_1.NormalSpace.Object) {
            name = 'normal';
        }
        else if (this.data.m_Space === type_1.NormalSpace.View) {
            name = 'viewNormal';
        }
        else if (this.data.m_Space === type_1.NormalSpace.Tangent) {
            // name = 'tangentNormal';
            name = 'worldNormal';
        }
        else if (this.data.m_Space === type_1.NormalSpace.World) {
            name = 'worldNormal';
        }
        return `${this.getOutputVarDefine(0)} = ${name};`;
    }
}
exports.default = NormalVectorNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9ybWFsVmVjdG9yTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NvdXJjZS9wYW5lbC9vcGVyYXRpb24vbm9kZXMvaW5wdXQvZ2VvbWV0cnkvTm9ybWFsVmVjdG9yTm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUEyQztBQUMzQyx3Q0FBbUU7QUFHbkUsTUFBcUIsZ0JBQWlCLFNBQVEsaUJBQVU7SUFHcEQsWUFBYSxJQUFJO1FBQ2IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBSGYsMEJBQXFCLEdBQUcsNEJBQXFCLENBQUMsS0FBSyxDQUFDO1FBS2hELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssa0JBQVcsQ0FBQyxNQUFNLEdBQUcsa0JBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDL0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QzthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssa0JBQVcsQ0FBQyxJQUFJLEdBQUcsa0JBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQzthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssa0JBQVcsQ0FBQyxPQUFPLEdBQUcsa0JBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDckUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsS0FBSyxHQUFHLGtCQUFXLENBQUMsTUFBTSxFQUFFO1lBQ25FLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0M7SUFDTCxDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsTUFBTSxFQUFFO1lBQzFDLElBQUksR0FBRyxRQUFRLENBQUM7U0FDbkI7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsSUFBSSxFQUFFO1lBQzdDLElBQUksR0FBRyxZQUFZLENBQUM7U0FDdkI7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFXLENBQUMsT0FBTyxFQUFFO1lBQ2hELDBCQUEwQjtZQUMxQixJQUFJLEdBQUcsYUFBYSxDQUFDO1NBQ3hCO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxrQkFBVyxDQUFDLEtBQUssRUFBRTtZQUM5QyxJQUFJLEdBQUcsYUFBYSxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztJQUN0RCxDQUFDO0NBQ0o7QUE1Q0QsbUNBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhZGVyTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9iYXNlXCI7XG5pbXBvcnQgeyBDb25jcmV0ZVByZWNpc2lvblR5cGUsIE5vcm1hbFNwYWNlIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3JtYWxWZWN0b3JOb2RlIGV4dGVuZHMgU2hhZGVyTm9kZSB7XG4gICAgY29uY3JldGVQcmVjaXNpb25UeXBlID0gQ29uY3JldGVQcmVjaXNpb25UeXBlLkZpeGVkO1xuXG4gICAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoZGF0YSlcblxuICAgICAgICBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IE5vcm1hbFNwYWNlLk9iamVjdCAtIE5vcm1hbFNwYWNlLk9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5kZXBWYXJpbmdzLnB1c2goTm9ybWFsU3BhY2UuT2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gTm9ybWFsU3BhY2UuVmlldyAtIE5vcm1hbFNwYWNlLk9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5kZXBWYXJpbmdzLnB1c2goTm9ybWFsU3BhY2UuVmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IE5vcm1hbFNwYWNlLlRhbmdlbnQgLSBOb3JtYWxTcGFjZS5PYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKE5vcm1hbFNwYWNlLlRhbmdlbnQpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm90IHN1cHBvcnQgVGFuZ2VudCBOb3JtYWwnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gTm9ybWFsU3BhY2UuV29ybGQgLSBOb3JtYWxTcGFjZS5PYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuZGVwVmFyaW5ncy5wdXNoKE5vcm1hbFNwYWNlLldvcmxkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhbGNDb25jcmV0ZVByZWNpc2lvbiAoKSB7XG4gICAgICAgIHRoaXMuc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICAgICAgICAgIHNsb3QuX2NvbmNyZXRlUHJlY2lzaW9uID0gMztcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZW5lcmF0ZUNvZGUgKCkge1xuICAgICAgICBsZXQgbmFtZSA9ICdub3JtYWwnO1xuICAgICAgICBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IE5vcm1hbFNwYWNlLk9iamVjdCkge1xuICAgICAgICAgICAgbmFtZSA9ICdub3JtYWwnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBOb3JtYWxTcGFjZS5WaWV3KSB7XG4gICAgICAgICAgICBuYW1lID0gJ3ZpZXdOb3JtYWwnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBOb3JtYWxTcGFjZS5UYW5nZW50KSB7XG4gICAgICAgICAgICAvLyBuYW1lID0gJ3RhbmdlbnROb3JtYWwnO1xuICAgICAgICAgICAgbmFtZSA9ICd3b3JsZE5vcm1hbCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IE5vcm1hbFNwYWNlLldvcmxkKSB7XG4gICAgICAgICAgICBuYW1lID0gJ3dvcmxkTm9ybWFsJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5nZXRPdXRwdXRWYXJEZWZpbmUoMCl9ID0gJHtuYW1lfTtgO1xuICAgIH1cbn1cblxuIl19